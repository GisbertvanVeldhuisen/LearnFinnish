@mixin font-face($font-family, $file-path, $font-weight, $font-style) {
  @font-face {
    font-display: swap;
    font-family: $font-family;
    src: local($font-family), url("#{$file-path}.woff2") format("woff2"),
    url("#{$file-path}.woff") format("woff");
    font-weight: $font-weight;
    font-style: $font-style;
    unicode-range: U+000-5FF;
  }
}

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
            str-replace(
                str-slice($string, $index + str-length($search)),
                $search,
                $replace
            );
  }

  @return $string;
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@function get-line-height($font-size, $line-height) {
  @return $line-height / $font-size;
}

@function pow($number, $exponent) {
  @if (round($exponent) !=$exponent) {
    @return exp($exponent * ln($number));
  }

  $value: 1;

  @if $exponent>0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $value: $value / $number;
    }
  }

  @return $value;
}

@function factorial($value) {
  $result: 1;

  @if $value==0 {
    @return $result;
  }

  @for $index from 1 through $value {
    $result: $result * $index;
  }

  @return $result;
}

@function summation($iteratee, $input, $initial: 0, $limit: 100) {
  $sum: 0;

  @for $index from $initial to $limit {
    $sum: $sum + call($iteratee, $input, $index);
  }

  @return $sum;
}

@function exp-maclaurin($x, $n) {
  @return (pow($x, $n) / factorial($n));
}

@function exp($value) {
  @return summation("exp-maclaurin", $value, 0, 100);
}

@function ln-maclaurin($x, $n) {
  @return (pow(-1, $n + 1) / $n) * (pow($x - 1, $n));
}

@function ln($value) {
  $ten-exp: 1;
  $ln-ten: 2.30258509;

  @while ($value > pow(10, $ten-exp)) {
    $ten-exp: $ten-exp + 1;
  }

  @return summation(ln-maclaurin, $value / pow(10, $ten-exp), 1, 100) +
        $ten-exp * $ln-ten;
}

@function luminance($color) {
  $colors: (
          "red": red($color),
          "green": green($color),
          "blue": blue($color),
  );

  @each $name, $value in $colors {
    $adusted: 0;
    $value: $value / 255;

    @if $value < 0.03928 {
      $value: $value / 12.92;
    } @else {
      $value: ($value + 0.055) / 1.055;
      $value: pow($value, 2.4);
    }

    $colors: map-merge(
                    $colors,
                    (
                            $name: $value,
                    )
    );
  }

  @return (map-get($colors, "red") * 0.2126)+ (
            map-get($colors, "green") * 0.7152
        )+ (map-get($colors, "blue") * 0.0722);
}

// font mixins
@mixin fluid-type(
  $min-font-size,
  $max-font-size,
  $font-weight: 400,
  $line-height: $max-font-size,
  $font-family: $base-family,
  $min-vw: 359px,
  $max-vw: 1139px
) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1==$u2 and $u1==$u3 and $u1==$u4 {
    & {
      font-size: $min-font-size;
      font-family: $font-family;

      @media screen and (min-width: $min-vw) {
        font-size: calc(
                #{$min-font-size} + #{strip-unit(
                            $max-font-size - $min-font-size
                        )} *
                ((100vw - #{$min-vw}) / #{strip-unit(
                                    $max-vw - $min-vw
                                )})
        );
        font-weight: $font-weight;
        line-height: get-line-height($max-font-size, $line-height);
      }

      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
        font-weight: $font-weight;
        line-height: get-line-height($max-font-size, $line-height);
      }
    }
  }
}

@mixin placeholder {
  ::-webkit-input-placeholder {
    @content;
  }

  ::-moz-placeholder {
    @content;
  }

  :-ms-input-placeholder {
    @content;
  }

  :-moz-placeholder {
    @content;
  }
}

// media query mixin
@mixin media($point, $type: max, $media: "only screen") {
  @if $point==laptop {
    $point: 1537px;
  } @else if $point==small-laptop {
    $point: 1366px;
  } @else if $point==large-tablet {
    $point: 1140px;
  } @else if $point==tablet {
    $point: 1024px;
  } @else if $point==small-tablet {
    $point: 768px;
  } @else if $point==phone {
    $point: 480px;
  } @else if $point==small-phone {
    $point: 360px;
  }

  @if $type==max {
    $point: $point - 1;
  }

  $mq-point: $point / 16px * 1rem;

  @media #{$media} and (#{$type}-width: $mq-point) {
    @content;
  }
}

// layout mixins
/*@mixin display-flex {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex-wrap($wrap: wrap) {
  -ms-flex-wrap: $wrap;
  flex-wrap: $wrap;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex: $values;
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}

@mixin flex-grow($grow: 1) {
  -webkit-box-flex: $grow;
  -ms-flex-positive: $grow;
  flex-grow: $grow;
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}

@mixin columnCSS {
  display: inline-block;
  margin: 10px;
}

@mixin align-items($align: center) {
  -webkit-box-align: $align;
  -ms-flex-align: $align;
  align-items: $align;
}

@mixin align-content($align: center) {
  -ms-flex-line-pack: $align;
  align-content: $align;
}

@mixin justify-content($justify: center) {
  -webkit-box-pack: $justify;
  -ms-flex-pack: $justify;
  justify-content: $justify;
}

@mixin space-between {
  -webkit-box-pack: justify;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

@mixin flex-direction($direction: column) {
  @if ($direction==column) {
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
  }

  @if ($direction==column-reverse) {
    -webkit-box-orient: vertical;
    -webkit-box-direction: reverse;
    -ms-flex-direction: column-reverse;
    flex-direction: column-reverse;
  }

  @if ($direction==row) {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-direction: row;
    flex-direction: row;
  }

  @if ($direction==row-reverse) {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: reverse;
    -ms-flex-direction: row-reverse;
    flex-direction: row-reverse;
  }
}*/

@mixin column-count($count: 2) {
  -webkit-column-count: $count;
  column-count: $count;
}

@mixin column-gap($gap) {
  -webkit-column-gap: $gap;
  column-gap: $gap;
}

@mixin column-width($width) {
  -webkit-column-width: $width;
  column-width: $width;
}

@mixin transform($transforms) {
  -webkit-transform: $transforms;
  transform: $transforms;
}

// animations
@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }

  @keyframes #{$animationName} {
    @content;
  }
}

@mixin animation($animate...) {
  $max: length($animate);
  $animations: "";

  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};

    @if $i < $max {
      $animations: #{$animations + ", "};
    }
  }

  -webkit-animation: $animations;
  animation: $animations;
}

@mixin transition($args) {
  -webkit-transition: $args;
  transition: $args;
}

@mixin transition-delay($args) {
  -webkit-transition-delay: $args;
  transition-delay: $args;
}

// style
@mixin box-shadow($shadow1, $shadow2: false) {
  $params: $shadow1;

  @if $shadow2 {
    $params: $shadow1, $shadow2;
  }

  -webkit-box-shadow: $params;
  box-shadow: $params;
}

//gradient
@mixin border-dashed() {
  background-image: -webkit-gradient(
                  linear,
                  left top,
                  right top,
                  color-stop(50%, transparent),
                  color-stop(50%, #d5d5d5)
  );
  background-image: -o-linear-gradient(left, transparent 50%, #d5d5d5 50%);
  background-image: linear-gradient(to right, transparent 50%, #d5d5d5 50%);
}

@mixin icon($icon, $color: currentColor) {
  $color: str-replace($color, "#", "%23");
  $icon: str-replace($icon, "currentColor", "#{$color}");
  background-image: $icon;
}
